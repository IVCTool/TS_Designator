plugins {
    // using the Java core Application plugin
    id 'application'
    // JIB Container Support for Java applications
    id 'com.google.cloud.tools.jib' version '3.1.2'
}


mainClassName = 'nl.tno.msg.testapp.TestApp'


// setup the common jib configuration
task jibApplication () {
    doFirst {
        jib {
            container {
                entrypoint = 'INHERIT'
                creationTime = 'USE_CURRENT_TIMESTAMP'
                environment = ['LRC_ENTRYPOINT': '/root/application/start.sh']
            }
            extraDirectories {
                paths {
                    path {
                        from = file('docker')
                        into = '/root/application'
                    }
                    path {
                        from = file('src/main/resources')
                        into = '/usr/local/lrc'
                    }
                }
                permissions = ['/root/application/start.sh': '755']
            }
        }
    }
    dependsOn 'distTar'
}

task jibPitch (type: com.google.cloud.tools.jib.gradle.BuildDockerTask) {
    group = 'Docker'
    description = 'Creates images for the Pitch RTI'
    jibExtension = project.extensions.getByName('jib')
    dependsOn jibApplication
    doFirst {
        jib {
            from {
                image = 'hlacontainers/lrc:pitch-skeleton-alpine'
            }
            to {
                image = "ivct/ts-designator:testapp-pi-skeleton-${designatorVersion}"
                tags = ["pi-latest"]
            }
        }
    }
}

task jibPortico (type: com.google.cloud.tools.jib.gradle.BuildDockerTask) {
    group = 'Docker'
    description = 'Creates images for the Portico RTI'
    jibExtension = project.extensions.getByName('jib')
    dependsOn jibApplication
    doFirst {
        jib {
            from {
                image = 'hlacontainers/lrc:portico-nightly-2016.05.28-alpine'
            }
            to {
                image = "ivct/ts-designator:testapp-po-${designatorVersion}"
                tags = ["po-latest"]
            }
        }
    }
}

task jibMak (type: com.google.cloud.tools.jib.gradle.BuildDockerTask) {
    group = 'Docker'
    description = 'Creates images for the MaK RTI'
    jibExtension = project.extensions.getByName('jib')
    dependsOn jibApplication
    doFirst {
        jib {
            from {
                image = 'hlacontainers/lrc:vtmak-4.5f-centos7'
            }
            to {
                image = "ivct/ts-designator:testapp-ma-${designatorVersion}"
                tags = ["ma-latest"]
            }
        }
    }
}

tasks.register ("dockerBuildImage") {
    group = 'Docker'
    description = 'Creates docker images for RTIs'
    dependsOn 'jibMak'
    dependsOn 'jibPortico'
    dependsOn 'jibPitch'
}



dependencies {
    implementation project(':TS_Designator')
    implementation libraries.oorti
    implementation libraries.slf4j_api
    implementation libraries.logback_classic
	implementation libraries.logback_core
}

tasks.withType(CreateStartScripts) {
    classpath += files('lib')
doLast {
        def windowsScriptFile = file getWindowsScript()
        def unixScriptFile = file getUnixScript()
        windowsScriptFile.text = windowsScriptFile.text.replace('%APP_HOME%\\lib\\lib', '%APP_HOME%\\lib;%LRC_CLASSPATH%')
        unixScriptFile.text = unixScriptFile.text.replace('$APP_HOME/lib/lib', '$APP_HOME/lib:$LRC_CLASSPATH')
    }
}
