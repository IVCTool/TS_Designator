apply plugin: 'application'

// -----------------------------------------------------------------------------
// Docker
// -----------------------------------------------------------------------------
buildscript {
    repositories {
		mavenLocal()
		mavenCentral()
	}
    dependencies {
	   classpath libraries.docker
    }
}

// docker plugin
apply plugin: com.bmuschko.gradle.docker.DockerRemoteApiPlugin

// import remote API plugin task groups
import com.bmuschko.gradle.docker.tasks.*
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage

mainClassName = 'nl.tno.msg.testapp.TestApp'

task dockerBuildPitchImage(type: DockerBuildImage) {
    dependsOn 'install'
	group = 'Docker'
	description = 'Builds the testapp docker image for Pitch'
    dockerFile = project.file('Dockerfile-pi')
    buildArgs.put('version', "${designatorVersion}")
	inputDir = file('.')
    tags.add ("ivct/ts-designator:testapp-pi-skeleton-${designatorVersion}")
}

task dockerBuildPorticoImage(type: DockerBuildImage) {
    dependsOn 'install'
	group = 'Docker'
	description = 'Builds the testapp docker image for Pitch'
    dockerFile = project.file('Dockerfile-po')
    buildArgs.put('version', "${designatorVersion}")
	inputDir = file('.')
    tags.add ("ivct/ts-designator:testapp-po-${designatorVersion}")
}

task dockerBuildMakImage(type: DockerBuildImage) {
    dependsOn 'install'
	group = 'Docker'
	description = 'Builds the testapp docker image for Pitch'
    dockerFile = project.file('Dockerfile-ma')
    buildArgs.put('version', "${designatorVersion}")
	inputDir = file('.')
    tags.add ("ivct/ts-designator:testapp-ma-${designatorVersion}")
}

tasks.register ("dockerBuildImage") {
    group = 'Docker'
    description = 'Creates docker images for RTIs'
    dependsOn 'dockerBuildPitchImage'
    dependsOn 'dockerBuildPorticoImage'
    dependsOn 'dockerBuildMakImage'
}


dependencies {
    compileOnly group: 'io.github.msg134', name: 'IEEE1516e', version: ivctVersion
    implementation libraries.tc_lib_designator
    implementation libraries.tc_lib
    implementation libraries.oorti
    compile        libraries.slf4j_api
    runtime        libraries.logback_classic
	runtime        libraries.logback_core
}

tasks.withType(CreateStartScripts) {
    classpath += files('lib')
doLast {
        def windowsScriptFile = file getWindowsScript()
        def unixScriptFile = file getUnixScript()
        windowsScriptFile.text = windowsScriptFile.text.replace('%APP_HOME%\\lib\\lib', '%APP_HOME%\\lib;%LRC_CLASSPATH%')
        unixScriptFile.text = unixScriptFile.text.replace('$APP_HOME/lib/lib', '$APP_HOME/lib:$LRC_CLASSPATH')
    }
}
