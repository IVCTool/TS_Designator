// This file was generated by the TNO Bean Generator.
// Any modifications to this file will be lost upon re-generation.
// Generated on: 2020/03/27 12:19:05

package nl.tno.rpr.objects;

import nl.tno.rpr.datatypes.EntityIdentifierStruct;
import nl.tno.rpr.datatypes.EntityTypeStruct;
import nl.tno.rpr.datatypes.IsPartOfStruct;
import nl.tno.rpr.datatypes.SpatialVariantStruct;

/**
 * A base class of aggregate and discrete scenario domain participants. The BaseEntity class is
 * characterized by being located at a particular location in space and independently movable, if
 * capable of movement at all. It specifically excludes elements normally considered to be a
 * component of another element. The BaseEntity class is intended to be a container for common
 * attributes for entities of this type. Since it lacks sufficient class specific attributes that
 * are required for simulation purposes, federates cannot publish objects of this class. Certain
 * simulation management federates, e.g. viewers, may subscribe to this class. Simulation federates
 * will normally subscribe to one of the subclasses, to gain the extra information required to
 * properly simulate the entity.
 */
public class BaseEntity {

  /** The category of the entity. */
  EntityTypeStruct EntityType;

  /** The unique identifier for the entity instance. */
  EntityIdentifierStruct EntityIdentifier;

  /**
   * Defines if the entity if a constituent part of another entity (denoted the host entity). If the
   * entity is a constituent part of another entity then the HostEntityIdentifier shall be set to
   * the EntityIdentifier of the host entity and the HostRTIObjectIdentifier shall be set to the RTI
   * object instance ID of the host entity. If the entity is not a constituent part of another
   * entity then the HostEntityIdentifier shall be set to 0.0.0 and the HostRTIObjectIdentifier
   * shall be set to the empty string.
   */
  IsPartOfStruct IsPartOf;

  /** Spatial state stored in one variant record attribute. */
  SpatialVariantStruct Spatial;

  /** Relative spatial state stored in one variant record attribute. */
  SpatialVariantStruct RelativeSpatial;

  public EntityTypeStruct getEntityType() {
    return this.EntityType;
  }

  public void setEntityType(EntityTypeStruct EntityType) {
    this.EntityType = EntityType;
  }

  public EntityIdentifierStruct getEntityIdentifier() {
    return this.EntityIdentifier;
  }

  public void setEntityIdentifier(EntityIdentifierStruct EntityIdentifier) {
    this.EntityIdentifier = EntityIdentifier;
  }

  public IsPartOfStruct getIsPartOf() {
    return this.IsPartOf;
  }

  public void setIsPartOf(IsPartOfStruct IsPartOf) {
    this.IsPartOf = IsPartOf;
  }

  public SpatialVariantStruct getSpatial() {
    return this.Spatial;
  }

  public void setSpatial(SpatialVariantStruct Spatial) {
    this.Spatial = Spatial;
  }

  public SpatialVariantStruct getRelativeSpatial() {
    return this.RelativeSpatial;
  }

  public void setRelativeSpatial(SpatialVariantStruct RelativeSpatial) {
    this.RelativeSpatial = RelativeSpatial;
  }
}
