// This file was generated by the TNO Bean Generator.
// Any modifications to this file will be lost upon re-generation.
// Generated on: 2020/03/27 12:19:05

package nl.tno.rpr.objects;

import nl.tno.rpr.datatypes.ArticulatedParameterStruct;
import nl.tno.rpr.datatypes.CamouflageEnum32;
import nl.tno.rpr.datatypes.DamageStatusEnum32;
import nl.tno.rpr.datatypes.EntityTypeStruct;
import nl.tno.rpr.datatypes.ForceIdentifierEnum8;
import nl.tno.rpr.datatypes.MarkingStruct;
import nl.tno.rpr.datatypes.PropulsionSystemDataStruct;
import nl.tno.rpr.datatypes.RPRboolean;
import nl.tno.rpr.datatypes.TrailingEffectsCodeEnum32;
import nl.tno.rpr.datatypes.VectoringNozzleSystemDataStruct;

/** A base class of all discrete platform scenario domain participants. */
public class PhysicalEntity extends BaseEntity {

  /** Index used to obtain the acoustics (sound through air) signature state of the entity. */
  short AcousticSignatureIndex;

  /** The category of entity to be used when viewed by entities on the 'opposite' side. */
  EntityTypeStruct AlternateEntityType;

  /**
   * Identification of the visible parts, and their states, of the entity which are capable of
   * independent motion.
   */
  ArticulatedParameterStruct[] ArticulatedParametersArray;

  /** The type of camouflage in use (if any). */
  CamouflageEnum32 CamouflageType;

  /** The state of damage of the entity. */
  DamageStatusEnum32 DamageState;

  /** Whether the entity's engine is generating smoke or not. */
  RPRboolean EngineSmokeOn;

  /** Whether the entity's main weapon system has been disabled or not. */
  RPRboolean FirePowerDisabled;

  /** Whether the entity is on fire (with visible flames) or not. */
  RPRboolean FlamesPresent;

  /** The identification of the force that the entity belongs to. */
  ForceIdentifierEnum8 ForceIdentifier;

  /** Whether the entity has the capability to supply other entities with ammunition. */
  RPRboolean HasAmmunitionSupplyCap;

  /** Whether the entity has the capability to supply other entities with fuel or not. */
  RPRboolean HasFuelSupplyCap;

  /** Whether the entity has the capability to recover other entities or not. */
  RPRboolean HasRecoveryCap;

  /** Whether the entity has the capability to repair other entities or not. */
  RPRboolean HasRepairCap;

  /** Whether the entity is immobilized or not. */
  RPRboolean Immobilized;

  /** Index used to obtain the infra-red signature state of the entity. */
  short InfraredSignatureIndex;

  /** Whether the entity is concealed or not. */
  RPRboolean IsConcealed;

  /** The entity's own measurement of speed (e.g. air speed for aircraft). */
  short LiveEntityMeasuredSpeed;

  /**
   * A unique marking or combination of characters used to distinguish the entity from other
   * entities.
   */
  MarkingStruct Marking;

  /** Whether the entity's power plant is on or not. */
  RPRboolean PowerPlantOn;

  /** The basic operating data of the propulsion systems aboard the entity. */
  PropulsionSystemDataStruct[] PropulsionSystemsData;

  /** Index used to obtain the radar cross section signature state of the entity. */
  short RadarCrossSectionSignatureIndex;

  /** Whether the entity is generating smoke or not (intentional or unintentional). */
  RPRboolean SmokePlumePresent;

  /** Whether the entity has deployed tent or not. */
  RPRboolean TentDeployed;

  /** The type and size of any trail that the entity is making. */
  TrailingEffectsCodeEnum32 TrailingEffectsCode;

  /** The basic operational data for the vectoring nozzle systems aboard the entity. */
  VectoringNozzleSystemDataStruct[] VectoringNozzleSystemData;

  public short getAcousticSignatureIndex() {
    return this.AcousticSignatureIndex;
  }

  public void setAcousticSignatureIndex(short AcousticSignatureIndex) {
    this.AcousticSignatureIndex = AcousticSignatureIndex;
  }

  public EntityTypeStruct getAlternateEntityType() {
    return this.AlternateEntityType;
  }

  public void setAlternateEntityType(EntityTypeStruct AlternateEntityType) {
    this.AlternateEntityType = AlternateEntityType;
  }

  public ArticulatedParameterStruct[] getArticulatedParametersArray() {
    return this.ArticulatedParametersArray;
  }

  public void setArticulatedParametersArray(
      ArticulatedParameterStruct[] ArticulatedParametersArray) {
    this.ArticulatedParametersArray = ArticulatedParametersArray;
  }

  public CamouflageEnum32 getCamouflageType() {
    return this.CamouflageType;
  }

  public void setCamouflageType(CamouflageEnum32 CamouflageType) {
    this.CamouflageType = CamouflageType;
  }

  public DamageStatusEnum32 getDamageState() {
    return this.DamageState;
  }

  public void setDamageState(DamageStatusEnum32 DamageState) {
    this.DamageState = DamageState;
  }

  public RPRboolean getEngineSmokeOn() {
    return this.EngineSmokeOn;
  }

  public void setEngineSmokeOn(RPRboolean EngineSmokeOn) {
    this.EngineSmokeOn = EngineSmokeOn;
  }

  public RPRboolean getFirePowerDisabled() {
    return this.FirePowerDisabled;
  }

  public void setFirePowerDisabled(RPRboolean FirePowerDisabled) {
    this.FirePowerDisabled = FirePowerDisabled;
  }

  public RPRboolean getFlamesPresent() {
    return this.FlamesPresent;
  }

  public void setFlamesPresent(RPRboolean FlamesPresent) {
    this.FlamesPresent = FlamesPresent;
  }

  public ForceIdentifierEnum8 getForceIdentifier() {
    return this.ForceIdentifier;
  }

  public void setForceIdentifier(ForceIdentifierEnum8 ForceIdentifier) {
    this.ForceIdentifier = ForceIdentifier;
  }

  public RPRboolean getHasAmmunitionSupplyCap() {
    return this.HasAmmunitionSupplyCap;
  }

  public void setHasAmmunitionSupplyCap(RPRboolean HasAmmunitionSupplyCap) {
    this.HasAmmunitionSupplyCap = HasAmmunitionSupplyCap;
  }

  public RPRboolean getHasFuelSupplyCap() {
    return this.HasFuelSupplyCap;
  }

  public void setHasFuelSupplyCap(RPRboolean HasFuelSupplyCap) {
    this.HasFuelSupplyCap = HasFuelSupplyCap;
  }

  public RPRboolean getHasRecoveryCap() {
    return this.HasRecoveryCap;
  }

  public void setHasRecoveryCap(RPRboolean HasRecoveryCap) {
    this.HasRecoveryCap = HasRecoveryCap;
  }

  public RPRboolean getHasRepairCap() {
    return this.HasRepairCap;
  }

  public void setHasRepairCap(RPRboolean HasRepairCap) {
    this.HasRepairCap = HasRepairCap;
  }

  public RPRboolean getImmobilized() {
    return this.Immobilized;
  }

  public void setImmobilized(RPRboolean Immobilized) {
    this.Immobilized = Immobilized;
  }

  public short getInfraredSignatureIndex() {
    return this.InfraredSignatureIndex;
  }

  public void setInfraredSignatureIndex(short InfraredSignatureIndex) {
    this.InfraredSignatureIndex = InfraredSignatureIndex;
  }

  public RPRboolean getIsConcealed() {
    return this.IsConcealed;
  }

  public void setIsConcealed(RPRboolean IsConcealed) {
    this.IsConcealed = IsConcealed;
  }

  public short getLiveEntityMeasuredSpeed() {
    return this.LiveEntityMeasuredSpeed;
  }

  public void setLiveEntityMeasuredSpeed(short LiveEntityMeasuredSpeed) {
    this.LiveEntityMeasuredSpeed = LiveEntityMeasuredSpeed;
  }

  public MarkingStruct getMarking() {
    return this.Marking;
  }

  public void setMarking(MarkingStruct Marking) {
    this.Marking = Marking;
  }

  public RPRboolean getPowerPlantOn() {
    return this.PowerPlantOn;
  }

  public void setPowerPlantOn(RPRboolean PowerPlantOn) {
    this.PowerPlantOn = PowerPlantOn;
  }

  public PropulsionSystemDataStruct[] getPropulsionSystemsData() {
    return this.PropulsionSystemsData;
  }

  public void setPropulsionSystemsData(PropulsionSystemDataStruct[] PropulsionSystemsData) {
    this.PropulsionSystemsData = PropulsionSystemsData;
  }

  public short getRadarCrossSectionSignatureIndex() {
    return this.RadarCrossSectionSignatureIndex;
  }

  public void setRadarCrossSectionSignatureIndex(short RadarCrossSectionSignatureIndex) {
    this.RadarCrossSectionSignatureIndex = RadarCrossSectionSignatureIndex;
  }

  public RPRboolean getSmokePlumePresent() {
    return this.SmokePlumePresent;
  }

  public void setSmokePlumePresent(RPRboolean SmokePlumePresent) {
    this.SmokePlumePresent = SmokePlumePresent;
  }

  public RPRboolean getTentDeployed() {
    return this.TentDeployed;
  }

  public void setTentDeployed(RPRboolean TentDeployed) {
    this.TentDeployed = TentDeployed;
  }

  public TrailingEffectsCodeEnum32 getTrailingEffectsCode() {
    return this.TrailingEffectsCode;
  }

  public void setTrailingEffectsCode(TrailingEffectsCodeEnum32 TrailingEffectsCode) {
    this.TrailingEffectsCode = TrailingEffectsCode;
  }

  public VectoringNozzleSystemDataStruct[] getVectoringNozzleSystemData() {
    return this.VectoringNozzleSystemData;
  }

  public void setVectoringNozzleSystemData(
      VectoringNozzleSystemDataStruct[] VectoringNozzleSystemData) {
    this.VectoringNozzleSystemData = VectoringNozzleSystemData;
  }
}
