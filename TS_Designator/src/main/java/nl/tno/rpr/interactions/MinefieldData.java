// This file was generated by the TNO Bean Generator.
// Any modifications to this file will be lost upon re-generation.
// Generated on: 2020/03/27 12:19:05

package nl.tno.rpr.interactions;

import nl.tno.rpr.datatypes.ClockTimeStruct;
import nl.tno.rpr.datatypes.EntityTypeStruct;
import nl.tno.rpr.datatypes.MineFusingStruct;
import nl.tno.rpr.datatypes.MinefieldPaintSchemeEnum32;
import nl.tno.rpr.datatypes.MinefieldSensorTypeEnum32;
import nl.tno.rpr.datatypes.OrientationStruct;
import nl.tno.rpr.datatypes.WorldLocationStruct;

/** Provides information on individual mines contained within a minefield */
public class MinefieldData {

  /**
   * Specifies the offset of the origin of the mine coordinate system with respect to the ground
   * surface
   */
  float[] GroundBurialDepthOffset;

  /** Specifies the primary and secondary fuse and anti-handling device for each mine */
  MineFusingStruct[] Fusing;

  /** Specifies the real-world (UTC) emplacement time of the mine */
  ClockTimeStruct[] MineEmplacementTime;

  /**
   * Identifies the mine entity identifier; the MineEntityID in conjunction with the MinefieldID
   * form the unique identifier for each mine
   */
  short[] MineEntityIdentifier;

  /** Identifies the minefield to which the mines belong */
  String MinefieldIdentifier;

  /** Specifies the location of the relative to the minefield location */
  WorldLocationStruct[] MineLocation;

  /**
   * Specifies the orientation of the center axis direction of fire of the mine, relative to the
   * minefield Coordinate System
   */
  OrientationStruct[] MineOrientation;

  /** Specifies the type of each mine contained within the minefield interaction */
  EntityTypeStruct MineType;

  /**
   * Specifies the total number of minefield records being published in response to a Minefield
   * Query interaction
   */
  byte NumberOfRecords;

  /** Specifies the number of trip detonation wires that exist for each mine */
  byte[] NumberTripDetonationWires;

  /** Specifies the number of vertices for each trip wire */
  byte[] NumberWireVertices;

  /** Specifies the camouflage scheme/color of the mine */
  MinefieldPaintSchemeEnum32[] PaintScheme;

  /**
   * Specifies the number of the current record in a sequence of minefield records published in
   * response to a Minefield Query interaction
   */
  byte RecordSequenceNumber;

  /** Specifies the local dielectric difference between the mine and the surrounding soil */
  float[] Reflectance;

  /**
   * Identifies the matching response to a request for mine information from the minefield
   * simulation made by means of a Minefield Query interaction
   */
  byte RequestIdentifier;

  /**
   * Identifies the entity that requested the information from the minefield simulation in QRP
   * (Query Response Protocol) mode
   */
  String RequestingEntityIdentifier;

  /**
   * Specifies the coefficient to be utilized to insure proper correlation between detectors located
   * on different simulation platforms
   */
  byte[] ScalarDetectionCoefficient;

  /**
   * In QRP mode, specifies the requesting sensor types which were specified in the minefield query
   * whereas in Heartbeat mode, specifies the sensor types that are being served by the minefield
   */
  MinefieldSensorTypeEnum32[] SensorTypes;

  /**
   * Specifies the offset of the origin of the mine coordinate system with respect to the snow
   * surface
   */
  float[] SnowBurialDepthOffset;

  /**
   * Specifies the temperature difference between the mine and the surrounding soil in degrees
   * Centigrade
   */
  float[] ThermalContrast;

  /**
   * Specifies the offset of the origin of the mine coordinate system with respect to the water
   * surface
   */
  float[] WaterBurialDepthOffset;

  /** Specifies the locations of vertices in a trip wire */
  WorldLocationStruct[] WireVertices;

  public float[] getGroundBurialDepthOffset() {
    return this.GroundBurialDepthOffset;
  }

  public void setGroundBurialDepthOffset(float[] GroundBurialDepthOffset) {
    this.GroundBurialDepthOffset = GroundBurialDepthOffset;
  }

  public MineFusingStruct[] getFusing() {
    return this.Fusing;
  }

  public void setFusing(MineFusingStruct[] Fusing) {
    this.Fusing = Fusing;
  }

  public ClockTimeStruct[] getMineEmplacementTime() {
    return this.MineEmplacementTime;
  }

  public void setMineEmplacementTime(ClockTimeStruct[] MineEmplacementTime) {
    this.MineEmplacementTime = MineEmplacementTime;
  }

  public short[] getMineEntityIdentifier() {
    return this.MineEntityIdentifier;
  }

  public void setMineEntityIdentifier(short[] MineEntityIdentifier) {
    this.MineEntityIdentifier = MineEntityIdentifier;
  }

  public String getMinefieldIdentifier() {
    return this.MinefieldIdentifier;
  }

  public void setMinefieldIdentifier(String MinefieldIdentifier) {
    this.MinefieldIdentifier = MinefieldIdentifier;
  }

  public WorldLocationStruct[] getMineLocation() {
    return this.MineLocation;
  }

  public void setMineLocation(WorldLocationStruct[] MineLocation) {
    this.MineLocation = MineLocation;
  }

  public OrientationStruct[] getMineOrientation() {
    return this.MineOrientation;
  }

  public void setMineOrientation(OrientationStruct[] MineOrientation) {
    this.MineOrientation = MineOrientation;
  }

  public EntityTypeStruct getMineType() {
    return this.MineType;
  }

  public void setMineType(EntityTypeStruct MineType) {
    this.MineType = MineType;
  }

  public byte getNumberOfRecords() {
    return this.NumberOfRecords;
  }

  public void setNumberOfRecords(byte NumberOfRecords) {
    this.NumberOfRecords = NumberOfRecords;
  }

  public byte[] getNumberTripDetonationWires() {
    return this.NumberTripDetonationWires;
  }

  public void setNumberTripDetonationWires(byte[] NumberTripDetonationWires) {
    this.NumberTripDetonationWires = NumberTripDetonationWires;
  }

  public byte[] getNumberWireVertices() {
    return this.NumberWireVertices;
  }

  public void setNumberWireVertices(byte[] NumberWireVertices) {
    this.NumberWireVertices = NumberWireVertices;
  }

  public MinefieldPaintSchemeEnum32[] getPaintScheme() {
    return this.PaintScheme;
  }

  public void setPaintScheme(MinefieldPaintSchemeEnum32[] PaintScheme) {
    this.PaintScheme = PaintScheme;
  }

  public byte getRecordSequenceNumber() {
    return this.RecordSequenceNumber;
  }

  public void setRecordSequenceNumber(byte RecordSequenceNumber) {
    this.RecordSequenceNumber = RecordSequenceNumber;
  }

  public float[] getReflectance() {
    return this.Reflectance;
  }

  public void setReflectance(float[] Reflectance) {
    this.Reflectance = Reflectance;
  }

  public byte getRequestIdentifier() {
    return this.RequestIdentifier;
  }

  public void setRequestIdentifier(byte RequestIdentifier) {
    this.RequestIdentifier = RequestIdentifier;
  }

  public String getRequestingEntityIdentifier() {
    return this.RequestingEntityIdentifier;
  }

  public void setRequestingEntityIdentifier(String RequestingEntityIdentifier) {
    this.RequestingEntityIdentifier = RequestingEntityIdentifier;
  }

  public byte[] getScalarDetectionCoefficient() {
    return this.ScalarDetectionCoefficient;
  }

  public void setScalarDetectionCoefficient(byte[] ScalarDetectionCoefficient) {
    this.ScalarDetectionCoefficient = ScalarDetectionCoefficient;
  }

  public MinefieldSensorTypeEnum32[] getSensorTypes() {
    return this.SensorTypes;
  }

  public void setSensorTypes(MinefieldSensorTypeEnum32[] SensorTypes) {
    this.SensorTypes = SensorTypes;
  }

  public float[] getSnowBurialDepthOffset() {
    return this.SnowBurialDepthOffset;
  }

  public void setSnowBurialDepthOffset(float[] SnowBurialDepthOffset) {
    this.SnowBurialDepthOffset = SnowBurialDepthOffset;
  }

  public float[] getThermalContrast() {
    return this.ThermalContrast;
  }

  public void setThermalContrast(float[] ThermalContrast) {
    this.ThermalContrast = ThermalContrast;
  }

  public float[] getWaterBurialDepthOffset() {
    return this.WaterBurialDepthOffset;
  }

  public void setWaterBurialDepthOffset(float[] WaterBurialDepthOffset) {
    this.WaterBurialDepthOffset = WaterBurialDepthOffset;
  }

  public WorldLocationStruct[] getWireVertices() {
    return this.WireVertices;
  }

  public void setWireVertices(WorldLocationStruct[] WireVertices) {
    this.WireVertices = WireVertices;
  }
}
