// This file was generated by the TNO Bean Generator.
// Any modifications to this file will be lost upon re-generation.
// Generated on: 2020/03/27 12:19:05

package nl.tno.rpr.interactions;

import nl.tno.rpr.datatypes.TacticalDataLinkTypeEnum16;

/**
 * A radio signal that represents transmission of a pre-determined message by using a pre-defined
 * database index.
 */
public class DatabaseIndexRadioSignal extends RadioSignal {

  /** The object instance ID of the radio transmitting this signal. */
  String HostRadioIndex;

  /** The index into the federation specific database of stored signals. */
  int DatabaseIndex;

  /** The duration of the stored signal to be replayed. */
  int Duration;

  /** The offset, from the start of the stored signal, that the signal is replayed from. */
  int StartOffset;

  /** The type of tactical data link used to transmitted this signal (if any). */
  TacticalDataLinkTypeEnum16 TacticalDataLinkType;

  /** The number of tactical data link messages contained in this signal. */
  short TDLMessageCount;

  public String getHostRadioIndex() {
    return this.HostRadioIndex;
  }

  public void setHostRadioIndex(String HostRadioIndex) {
    this.HostRadioIndex = HostRadioIndex;
  }

  public int getDatabaseIndex() {
    return this.DatabaseIndex;
  }

  public void setDatabaseIndex(int DatabaseIndex) {
    this.DatabaseIndex = DatabaseIndex;
  }

  public int getDuration() {
    return this.Duration;
  }

  public void setDuration(int Duration) {
    this.Duration = Duration;
  }

  public int getStartOffset() {
    return this.StartOffset;
  }

  public void setStartOffset(int StartOffset) {
    this.StartOffset = StartOffset;
  }

  public TacticalDataLinkTypeEnum16 getTacticalDataLinkType() {
    return this.TacticalDataLinkType;
  }

  public void setTacticalDataLinkType(TacticalDataLinkTypeEnum16 TacticalDataLinkType) {
    this.TacticalDataLinkType = TacticalDataLinkType;
  }

  public short getTDLMessageCount() {
    return this.TDLMessageCount;
  }

  public void setTDLMessageCount(short TDLMessageCount) {
    this.TDLMessageCount = TDLMessageCount;
  }
}
